OUTPUT_FORMAT(elf32-i386)
OUTPUT_ARCH(i386)
ENTRY(_start)

PHDRS
{
    text_s2   PT_LOAD    FLAGS((1 << 0) | (1 << 2)) ;
    data_s2   PT_LOAD    FLAGS((1 << 1) | (1 << 2)) ;
    text_s3   PT_LOAD    FLAGS((1 << 0) | (1 << 2)) ;
    data_s3   PT_LOAD    FLAGS((1 << 1) | (1 << 2)) ;
}

SECTIONS
{
    . = 0x8000;

    .text.stage2 : {
        *(.entry)
        *(.realmode)
        *.s2.o(.text .text.*)
        *libgcc*.a:*(.text .text.*)
    } :text_s2

    .data.stage2 : {
        build_id_s2 = .;
        KEEP(*build-id.s2.o(*))

        *.s2.o(.no_unwind)
        s2_data_begin = .;
        *.s2.o(.data .data.*)
        *libgcc*.a:*(.data .data.*)
        s2_data_end = .;
        *.s2.o(.rodata .rodata.*)
        *libgcc*.a:*(.rodata .rodata.*)
#ifdef LINKER_STAGE2ONLY
        /* stage2 missing symbols overrides */
        stage2_map = .;
        stage3_common = .;
        build_id_s3 = .;
        full_map = .;
        getchar_internal = .;
        getchar = .;
        menu = .;
        term_write = .;
        term_textmode = .;
        term_vbe = .;
        stage3_addr = .;
        data_begin = .;
#else
        *(.stage2_map)
#endif
    } :data_s2

#ifndef LINKER_STAGE2ONLY
    .text.stage3 : {
        stage3_addr = .;
        *(.text .text.*)
    } :text_s3

    .data.stage3 : {
        build_id_s3 = .;
        KEEP(*build-id.s3.o(*))

        *(.rodata .rodata.*)
#ifdef LINKER_NOMAP
        full_map = .;
#else
        *(.full_map)
#endif
        *(.no_unwind)
        data_begin = .;
        *(.data .data.*)
    } :data_s3
#endif

    .note.gnu.build-id : {
        *(.note.gnu.build-id)
        limine_sys_size = . - 0x8000;
    } :data_s3

    .bss : {
        bss_begin = .;
        *(COMMON)
        *(.bss .bss.*)
        bss_end = .;
        data_end = .;
    } :data_s3

    /* DWARF section definitions from GNU binutils */
    /* Copyright (C) 2014-2022 Free Software Foundation, Inc.
       Copying and distribution of this script, with or without modification,
       are permitted in any medium without royalty provided the copyright
       notice and this notice are preserved.  */

    /* DWARF debug sections.
       Symbols in the DWARF debugging sections are relative to the beginning
       of the section so we begin them at 0.  */
    /* DWARF 1.  */
    .debug          0 : { *(.debug) }
    .line           0 : { *(.line) }
    /* GNU DWARF 1 extensions.  */
    .debug_srcinfo  0 : { *(.debug_srcinfo) }
    .debug_sfnames  0 : { *(.debug_sfnames) }
    /* DWARF 1.1 and DWARF 2.  */
    .debug_aranges  0 : { *(.debug_aranges) }
    .debug_pubnames 0 : { *(.debug_pubnames) }
    /* DWARF 2.  */
    .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
    .debug_abbrev   0 : { *(.debug_abbrev) }
    .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end) }
    .debug_frame    0 : { *(.debug_frame) }
    .debug_str      0 : { *(.debug_str) }
    .debug_loc      0 : { *(.debug_loc) }
    .debug_macinfo  0 : { *(.debug_macinfo) }
    /* SGI/MIPS DWARF 2 extensions.  */
    .debug_weaknames 0 : { *(.debug_weaknames) }
    .debug_funcnames 0 : { *(.debug_funcnames) }
    .debug_typenames 0 : { *(.debug_typenames) }
    .debug_varnames  0 : { *(.debug_varnames) }
    /* DWARF 3.  */
    .debug_pubtypes 0 : { *(.debug_pubtypes) }
    .debug_ranges   0 : { *(.debug_ranges) }
    /* DWARF 5.  */
    .debug_addr     0 : { *(.debug_addr) }
    .debug_line_str 0 : { *(.debug_line_str) }
    .debug_loclists 0 : { *(.debug_loclists) }
    .debug_macro    0 : { *(.debug_macro) }
    .debug_names    0 : { *(.debug_names) }
    .debug_rnglists 0 : { *(.debug_rnglists) }
    .debug_str_offsets 0 : { *(.debug_str_offsets) }
    .debug_sup      0 : { *(.debug_sup) }
    .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }

    /DISCARD/ : {
        *.a:*(*)
        *.o(*)
    }
}
